I"<h1 id="문제">문제</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
%matplotlib inline

from sklearn.linear_model import LogisticRegression

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score
from sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('diabetes.csv', sep=',')
print("### About Outcome value ###")
print(df['Outcome'].value_counts())
df.head(3)
</code></pre></div></div>
<p><img src="https://user-images.githubusercontent.com/84369912/126758410-0638c13f-5152-49af-9f28-394dddd2417e.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/84369912/126758428-62a10c63-0a7f-4f87-8721-f048a51e44be.png" alt="image" /></p>

<p>Outcome Negative( 0 ) 값이 500개, Positive ( 1 ) 값이 268개</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>df.info()
</code></pre></div></div>
<p><img src="https://user-images.githubusercontent.com/84369912/126758463-28b30f3a-4051-450e-aaa3-e985caffc3f8.png" alt="image" /></p>

<p>Null 존재 하지 않음을 확인, Data type 확인</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>df.describe()
</code></pre></div></div>
<p><img src="https://user-images.githubusercontent.com/84369912/126758729-a631eb8b-9849-48f6-a89d-ed4c09cb18e9.png" alt="image" /></p>

<p>Glucose, BMI, Insulin 등 min 값이 0인 feature 확인, 데이터 대체 및 스케일링 적용 검토</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def get_clf_eval(y_test=None, pred=None):
    confusion = confusion_matrix( y_test, pred)
    accuracy = accuracy_score(y_test , pred)
    precision = precision_score(y_test , pred)
    recall = recall_score(y_test , pred)
    f1 = f1_score(y_test,pred)
    # ROC-AUC 추가 
    roc_auc = roc_auc_score(y_test, pred)
    print('오차 행렬')
    print(confusion)
    # ROC-AUC print 추가
    print('정확도: {0:.4f}, 정밀도: {1:.4f}, 재현율: {2:.4f},\
    F1: {3:.4f}, AUC:{4:.4f}'.format(accuracy, precision, recall, f1, roc_auc),'\n')
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 피처 데이터 세트 X, 레이블 데이터 세트 y를 추출. 
# 맨 끝이 Outcome 컬럼으로 레이블 값임. 컬럼 위치 -1을 이용해 추출 
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 156, stratify=y)

# 로지스틱 회귀로 학습,예측 및 평가 수행. 
lr_clf = LogisticRegression()
lr_clf.fit(X_train , y_train)
pred = lr_clf.predict(X_test)
get_clf_eval(y_test , pred)
</code></pre></div></div>
<p><img src="https://user-images.githubusercontent.com/84369912/126758816-c342ae21-9e4c-453f-9920-a59fedf95977.png" alt="image" /></p>

<p>Outcome Negative가 상대적으로 많으므로, 재현율 성능 향상 위해 임곗값 별 정밀도와 재현율 값의 변화 확인</p>
:ET