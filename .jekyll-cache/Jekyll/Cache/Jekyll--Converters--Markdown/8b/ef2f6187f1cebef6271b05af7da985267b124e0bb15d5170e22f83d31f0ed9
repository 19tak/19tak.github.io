I"§<h2 id="Î¨∏Ï†ú">Î¨∏Ï†ú</h2>
<p>DuckManager ÏÑ§Í≥ÑÎèÑÏôÄ ÏΩîÎìú ÏàòÏ†ïÌïòÍ∏∞</p>

<h2 id="ÎãµÏïà">ÎãµÏïà</h2>
<p><img src="https://user-images.githubusercontent.com/84369912/126755184-a761b6ca-9c47-4ef0-b806-6c2fe83fc43b.png" alt="image" />
<img src="https://user-images.githubusercontent.com/84369912/126755210-401eb607-2efc-4e3f-ab0b-9ce5b3faa472.png" alt="image" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import random
import turtle
from abc import *

class Duck:
    def __init__(self):
        self._x=random.randint(-300,300)
        self._y=random.randint(-300,300)
        self._size=30
        self._turtle=turtle
        
    @abstractmethod
    def display(self):
        pass
    
    @classmethod
    def screen_reset(cls):
        cls._turtle = turtle
        cls._turtle.reset()

class Fly:
    _turtle=turtle
    def fly(self):
        self._turtle.penup()
        self._turtle.goto(self._x - 50, self._y - 10)
        self._turtle.pendown()
        self._turtle.color('black')
        self._turtle.write("ÎÇ†Îã§")
        
class Swim:
    _turtle=turtle
    def swim(self):
        self._turtle.penup()
        self._turtle.goto(self._x -50 , self._y + 50)
        self._turtle.pendown()
        self._turtle.color('black')
        self._turtle.write("ÏàòÏòÅ") 
        
class Quack:
    @abstractmethod
    def quack(self):
        pass
        
class RedDuck(Duck,Fly,Swim,Quack):
    def __init__(self):
        super(RedDuck,self).__init__()
        
    def display(self):
        self._turtle.penup()
        self._turtle.goto(self._x, self._y)
        self._turtle.pendown()
        self._turtle.color('red')
        self._turtle.begin_fill()
        self._turtle.circle(self._size)
        self._turtle.end_fill()
        
    def quack(self):
        self._turtle.penup()
        self._turtle.goto(self._x + 30, self._y + 50)
        self._turtle.pendown()
        self._turtle.color('black')
        self._turtle.write("ÍΩ•ÍΩ•")
        
class MallardDuck(Duck,Fly,Swim,Quack):
    def __init__(self):
        super(MallardDuck,self).__init__()
        
    def display(self):
        self._turtle.penup()
        self._turtle.goto(self._x, self._y)
        self._turtle.pendown()
        self._turtle.color('blue')
        self._turtle.begin_fill()
        self._turtle.circle(self._size)
        self._turtle.end_fill()
        
    def quack(self):
        self._turtle.penup()
        self._turtle.goto(self._x + 30, self._y + 50)
        self._turtle.pendown()
        self._turtle.color('black')
        self._turtle.write("ÍΩ•ÍΩ•")
        
class RubberDuck(Duck,Swim,Quack):
    def __init__(self):
        super(RubberDuck,self).__init__()
        
    def display(self):
        self._turtle.penup()
        self._turtle.goto(self._x, self._y)
        self._turtle.pendown()
        self._turtle.color('orange')
        self._turtle.begin_fill()
        self._turtle.circle(self._size)
        self._turtle.end_fill()
        
    def quack(self):
        self._turtle.penup()
        self._turtle.goto(self._x + 30, self._y + 50)
        self._turtle.pendown()
        self._turtle.color('black')
        self._turtle.write("ÏÇëÏÇë")
        
class DecoyDuck(Duck,Swim):
    def __init__(self):
        super(DecoyDuck,self).__init__()
        
    def display(self):
        self._turtle.penup()
        self._turtle.goto(self._x, self._y)
        self._turtle.pendown()
        self._turtle.color('green')
        self._turtle.begin_fill()
        self._turtle.circle(self._size)
        self._turtle.end_fill()

class DuckManager:
    __duck_list=[]
    def __init__(self,num):
        self.makeDucks(num)
        
    def makeDucks(self,num):
        __duck_kind=[MallardDuck,RedDuck,RubberDuck,DecoyDuck]
        for duck in range(num+1):
            DuckManager.__duck_list.append(__duck_kind[random.randint(0,3)]())
            
    @classmethod
    def getInstance(cls):
        if not cls.__instance:
            cls.__instance = DuckManager()
        return cls.__instance
    
    def dispDucks(self):
        for duck in DuckManager.__duck_list:
            if duck!= None:
                duck.display()
                
    def flyDucks(self):
        for duck in DuckManager.__duck_list:
            if duck != None:
                if isinstance(duck,Fly):
                    duck.fly()
                
    def swimDucks(self):
        for duck in DuckManager.__duck_list:
            if duck != None:
                if isinstance(duck,Swim):
                    duck.swim()
                    
    def quackDucks(self):
        for duck in DuckManager.__duck_list:
            if duck != None:
                if isinstance(duck,Quack):
                    duck.quack()
                    
    def dispAllDucks(self):
        for duck in DuckManager.__duck_list:
            if duck!= None:
                duck.display()
                if isinstance(duck,Swim):
                    duck.swim()
                if isinstance(duck,Quack):
                    duck.quack()
                if isinstance(duck,Fly):
                    duck.fly()

Duck.screen_reset()
dd=DuckManager(10).dispAllDucks()
dd2=DuckManager(10).dispDucks()
</code></pre></div></div>
:ET